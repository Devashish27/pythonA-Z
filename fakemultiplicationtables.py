# Method - 1:

# import random
#
# def fakeTable(inp):
#     # This function takes any number as input and returns its muliplication table as a list
#     # with a randomly chosen wrong result in the list
#     fakeResult = []
#     for i in range(1, 11):
#         fakeResult.append(i*inp)
#     print(fakeResult)
#     randItem = random.randrange(0, 10)
#     fakeResult[randItem] = fakeResult[randItem]+1
#     return fakeResult
#
# def faultFinder(inp, fakeResult):
#     # This function takes output of the fakeTable() and searches for the wrong result
#     # then correct it and returns the correct table
#     for i in range(1, 11):
#         if fakeResult[i-1] != (inp * i):
#             print(f"Result in item {i} is WRONG. Correcting it...")
#             fakeResult[i - 1] = inp * i
#         # else:
#         #     print(f"Result in item {i} is Correct.")
#     return fakeResult
#
#
# if _name_ == '__main__':
#     inp = int(input("Enter any number: "))
#
#     fakeResult = fakeTable(inp)
#     print("Faulty Table generated by Function1 is :", fakeResult)
#
#     corrResult = faultFinder(inp, fakeResult)
#     print("Correct Table generated by Function2 is:", corrResult)


# Main Solution..!
import random


def devMultiplication(number):
    wrong = random.randint(0, 9)
    table = [i * number for i in range(1, 11)]
    table[wrong] = table[wrong] + random.randint(0, 10)
    return table


def isCorrect(table, number):
    for i in range(1, 11):
        if table[i - 1] != i * number:
            return i - 1

    return None


if __name__ == "__main__":
    # print(devMultiplication(2))
    number = int(input("Enter A Number: "))
    myTable = devMultiplication(number)
    print(myTable)
    wrongIndex = isCorrect(myTable, number)
    print(f"The Table Is Wrong At Index {wrongIndex}")
    